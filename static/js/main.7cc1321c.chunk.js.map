{"version":3,"sources":["components/Task.jsx","components/TaskList.jsx","App.js","serviceWorker.js","index.js"],"names":["Task","props","react_default","a","createElement","className","name","onClick","onRemoveTask","taskListId","react_fontawesome_index_es","icon","TaskList","state","taskList","_this","tasks","taskValue","handleChange","event","setState","target","value","this","headerColor","_this2","renderHeaderColor","title","map","task","key","components_Task","id","onSubmit","e","preventDefault","onAddTask","type","onChange","React","Component","library","add","faPlus","faTrashAlt","faCheckCircle","App","matrix","color","handleAddTask","newTask","slice","forEach","push","handleRemoveTask","index","indexOf","splice","serialized","JSON","stringify","localStorage","setItem","getItem","parse","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cc1321c.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Task = function(props) {\n    return (\n        <li className=\"list-group-item\">\n        <div className=\"row\">\n            <div className=\"col\">{props.name}</div>\n            <div className=\"col text-right\">\n                <div className=\"btn-group\">\n                    <button className=\"btn btn-outline-success\" onClick={() => props.onRemoveTask(props.taskListId, props.name)}>\n                        <FontAwesomeIcon icon=\"check-circle\"/>\n                    </button>\n                    <button className=\"btn btn-outline-danger\" onClick={() => props.onRemoveTask(props.taskListId, props.name)}>\n                        <FontAwesomeIcon icon=\"trash-alt\"/>\n                    </button>\n                </div>\n            </div>\n        </div>\n        </li>\n    )\n}\n\nexport default Task;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Task from './Task'\n\nclass TaskList extends React.Component {\n\n    state = {\n        taskList: this.props.tasks,\n        taskValue: ''\n    }\n\n    renderHeaderColor() {\n        return \"card-header \" + this.props.headerColor;\n    }\n\n    handleChange = event => {\n        this.setState({taskValue: event.target.value})\n    }\n\n    render() {\n        const addTask = event => {\n            event.preventDefault();\n            this.props.onAddTask(this.props.id, this.state.taskValue); \n            this.setState({taskValue: ''})\n        }\n\n        return (\n            <div className=\"col-md-6 col-12 mb-3\">\n                <div className=\"card\">\n                    <h4 className={this.renderHeaderColor()}>{this.props.title}</h4>\n                    \n                    <div className=\"card-body\">\n                        <ul className=\"list-group list-group-flush\">\n                            {this.state.taskList.map((task, key) => <Task key={key} name={task} taskListId={this.props.id} onRemoveTask={this.props.onRemoveTask} />)}\n                        </ul>\n                        <form onSubmit={e => addTask(e)}>\n                            <div className=\"form-row\">\n                                <div className=\"col-md-10 col-12\">\n                                    <input type=\"text\" className=\"form-control\" name=\"task\" value={this.state.taskValue} onChange={this.handleChange} />\n                                </div>\n                                <div className=\"col-md-2 col-12\">\n                                    <button className=\"btn btn-outline-success form-control\"><FontAwesomeIcon icon=\"plus\" /> add</button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TaskList;","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.bundle'\nimport 'jquery/dist/jquery'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus, faTrashAlt, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport './App.css'\nimport TaskList from './components/TaskList'\n\nlibrary.add(faPlus, faTrashAlt, faCheckCircle)\n\n\nclass App extends React.Component {\n  state = {\n    matrix: [\n      {id: 0, title: 'Urgent & Important', color: \"bg-danger\", taskList: []},\n      {id: 1, title: 'Urgent', color: \"bg-warning\", taskList: []},\n      {id: 2, title: 'Important', color: \"bg-success\", taskList: []},\n      {id: 3, title: 'Not urgent & Not important', color: \"bg-default\", taskList: []},\n    ]\n  }\n\n  handleAddTask = (id, newTask) => {\n    const tasks = this.state.matrix.slice()\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.taskList.push(newTask)\n      }\n    })\n    this.setState({tasks: tasks})\n  }\n  \n  handleRemoveTask = (id, taskValue) => {\n    const tasks = this.state.matrix.slice()\n    tasks.forEach(task => {\n      if (task.id === id) {\n        let index = task.taskList.indexOf(taskValue)\n        if (index > -1) {\n          task.taskList.splice(index, 1)\n        }\n        \n      }\n    })\n    this.setState({tasks: tasks})\n  }\n\n  componentDidUpdate() {\n    let serialized = JSON.stringify(this.state.matrix)\n    localStorage.setItem('store', serialized)\n  }\n\n  componentWillMount() {\n    if (localStorage.getItem('store')) {\n      this.setState({matrix: JSON.parse(localStorage.getItem('store'))})\n    }\n  }\n\n  render() {\n\n    const tasks = this.state.matrix;\n    \n    return (\n      <main className=\"content boxed\">\n        <div className=\"row app\">\n          {tasks.map(task => <TaskList \n            key={task.id}\n            title={task.title} \n            id={task.id} \n            tasks={task.taskList} \n            onAddTask={this.handleAddTask}\n            onRemoveTask={this.handleRemoveTask}\n            headerColor={task.color} />)}\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}